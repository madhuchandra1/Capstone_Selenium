{"name": "test_file_upload_sendkeys", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff609501eb5+80197]\n\tGetHandleVerifier [0x0x7ff609501f10+80288]\n\t(No symbol) [0x0x7ff6092802fa]\n\t(No symbol) [0x0x7ff609296b15]\n\t(No symbol) [0x0x7ff609295603]\n\t(No symbol) [0x0x7ff609288bc7]\n\t(No symbol) [0x0x7ff609286a70]\n\t(No symbol) [0x0x7ff60928af6f]\n\t(No symbol) [0x0x7ff60928b02f]\n\t(No symbol) [0x0x7ff6092d16b6]\n\t(No symbol) [0x0x7ff60930037a]\n\t(No symbol) [0x0x7ff6092ca456]\n\t(No symbol) [0x0x7ff609300590]\n\t(No symbol) [0x0x7ff6093287fb]\n\t(No symbol) [0x0x7ff609300153]\n\t(No symbol) [0x0x7ff6092c8b02]\n\t(No symbol) [0x0x7ff6092c98d3]\n\tGetHandleVerifier [0x0x7ff6097be83d+2949837]\n\tGetHandleVerifier [0x0x7ff6097b8c6a+2926330]\n\tGetHandleVerifier [0x0x7ff6097d86c7+3055959]\n\tGetHandleVerifier [0x0x7ff60951cfee+191102]\n\tGetHandleVerifier [0x0x7ff6095250af+224063]\n\tGetHandleVerifier [0x0x7ff60950af64+117236]\n\tGetHandleVerifier [0x0x7ff60950b119+117673]\n\tGetHandleVerifier [0x0x7ff6094f10a8+11064]\n\tBaseThreadInitThunk [0x0x7ffa7b1ee8d7+23]\n\tRtlUserThreadStart [0x0x7ffa7bc4c53c+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c29631903532eaf743c5aaaab51b31ef\")>\n\n    def test_file_upload_sendkeys(driver):\n        with open(\"data/upload_test.txt\", \"w\") as f:\n            f.write(\"Test upload file\")\n        driver.get(\"https://the-internet.herokuapp.com/upload\")\n        upload_with_send_keys(driver, \"file-upload\", \"data/upload_test.txt\")\n        driver.find_element(By.ID, \"file-submit\").click()\n>       assert \"File Uploaded!\" in driver.find_element(By.TAG_NAME, \"h3\").text\n                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_file_upload.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:109: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000012FE904CE10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff6094f10a8+11064]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa7b1ee8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa7bc4c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff609501eb5+80197]\nE       \tGetHandleVerifier [0x0x7ff609501f10+80288]\nE       \t(No symbol) [0x0x7ff6092802fa]\nE       \t(No symbol) [0x0x7ff609296b15]\nE       \t(No symbol) [0x0x7ff609295603]\nE       \t(No symbol) [0x0x7ff609288bc7]\nE       \t(No symbol) [0x0x7ff609286a70]\nE       \t(No symbol) [0x0x7ff60928af6f]\nE       \t(No symbol) [0x0x7ff60928b02f]\nE       \t(No symbol) [0x0x7ff6092d16b6]\nE       \t(No symbol) [0x0x7ff60930037a]\nE       \t(No symbol) [0x0x7ff6092ca456]\nE       \t(No symbol) [0x0x7ff609300590]\nE       \t(No symbol) [0x0x7ff6093287fb]\nE       \t(No symbol) [0x0x7ff609300153]\nE       \t(No symbol) [0x0x7ff6092c8b02]\nE       \t(No symbol) [0x0x7ff6092c98d3]\nE       \tGetHandleVerifier [0x0x7ff6097be83d+2949837]\nE       \tGetHandleVerifier [0x0x7ff6097b8c6a+2926330]\nE       \tGetHandleVerifier [0x0x7ff6097d86c7+3055959]\nE       \tGetHandleVerifier [0x0x7ff60951cfee+191102]\nE       \tGetHandleVerifier [0x0x7ff6095250af+224063]\nE       \tGetHandleVerifier [0x0x7ff60950af64+117236]\nE       \tGetHandleVerifier [0x0x7ff60950b119+117673]\nE       \tGetHandleVerifier [0x0x7ff6094f10a8+11064]\nE       \tBaseThreadInitThunk [0x0x7ffa7b1ee8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffa7bc4c53c+44]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "179e9791-6dc9-41c6-8f4c-86da7770f27c-attachment.txt", "type": "text/plain"}], "start": 1761115245101, "stop": 1761115253903, "uuid": "ff387b5d-650a-4540-a4fb-63a0edf8f96b", "historyId": "c03992f08da6192dd16eec3540a43f92", "testCaseId": "c03992f08da6192dd16eec3540a43f92", "fullName": "tests.test_file_upload#test_file_upload_sendkeys", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_file_upload"}, {"name": "host", "value": "ASCENDI-8RP1I77"}, {"name": "thread", "value": "14392-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_file_upload"}], "titlePath": ["tests", "test_file_upload.py"]}
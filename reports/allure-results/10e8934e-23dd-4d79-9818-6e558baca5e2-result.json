{"name": "test_login_data_driven[TC003]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1a728a6c879262815460d508904a078c\")>, test_case = {'ExpectedResult': 'Success', 'Password': 'secret_sauce', 'TestCaseID': 'TC003', 'Username': 'problem_user'}\n\n    @pytest.mark.parametrize(\"test_case\", TEST_DATA, ids=[tc[\"TestCaseID\"] for tc in TEST_DATA])\n    def test_login_data_driven(driver, test_case):\n        \"\"\"\n        Data-Driven Login Test using Excel\n        Covers:\n        - Valid logins (standard_user, problem_user, etc.)\n        - Invalid logins (locked_out_user, empty fields, wrong creds)\n        \"\"\"\n        # Arrange\n        username = test_case.get(\"Username\", \"\")\n        password = test_case.get(\"Password\", \"\")\n        expected_result = test_case[\"ExpectedResult\"]  # \"Success\" or \"Error\"\n    \n        # Act\n        driver.get(BASE_URL)\n        login_page = LoginPage(driver)\n        login_page.login(username, password)\n    \n        # Assert\n        if expected_result == \"Success\":\n            # Should land on inventory page\n            inventory = InventoryPage(driver)\n            assert inventory.get_title() == \"Products\"\n            # Optional: logout to reset state for next test\n>           inventory.logout()\n\ntests\\test_login_data_driven.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\inventory_page.py:34: in logout\n    self.click(self.LOGOUT_LINK)\npages\\base_page.py:17: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1a728a6c879262815460d508904a078c\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000018F9BB723E0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "\nData-Driven Login Test using Excel\nCovers:\n- Valid logins (standard_user, problem_user, etc.)\n- Invalid logins (locked_out_user, empty fields, wrong creds)\n", "attachments": [{"name": "log", "source": "20e5ae7b-5e9c-4471-b4af-363b3e9a4842-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'TestCaseID': 'TC003', 'Username': 'problem_user', 'Password': 'secret_sauce', 'ExpectedResult': 'Success'}"}], "start": 1760859351654, "stop": 1760859377704, "uuid": "4ac15520-be71-4f4f-b41e-13d9b0e973b1", "historyId": "0c41b490c6742d85fe339816ea27212f", "testCaseId": "e61e91c8e7cf75b1f54487af25e7b0f4", "fullName": "tests.test_login_data_driven#test_login_data_driven", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_data_driven"}, {"name": "host", "value": "ASCENDI-8RP1I77"}, {"name": "thread", "value": "2188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_data_driven"}], "titlePath": ["tests", "test_login_data_driven.py"]}
{"uid":"c8cf978944ce9be4","name":"test_radio_buttons","fullName":"tests.test_form_elements#test_radio_buttons","historyId":"8ad1146345107cc3002a2f0e624a21e8","time":{"start":1760859063471,"stop":1760859070510,"duration":7039},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label class=\"custom-control-label\" for=\"yesRadio\">...</label> is not clickable at point (40, 833). Other element would receive the click: <div id=\"fixedban\" style=\"width:100%;margin:auto;text-align:center;float:none;overflow:hidden;display:scroll;position:fixed;bottom:0;z-index:9999999\">...</div>\n  (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff621c71eb5+80197]\n\tGetHandleVerifier [0x0x7ff621c71f10+80288]\n\t(No symbol) [0x0x7ff6219f02fa]\n\t(No symbol) [0x0x7ff621a4fe69]\n\t(No symbol) [0x0x7ff621a4d7ee]\n\t(No symbol) [0x0x7ff621a4a731]\n\t(No symbol) [0x0x7ff621a49620]\n\t(No symbol) [0x0x7ff621a3abc8]\n\t(No symbol) [0x0x7ff621a7037a]\n\t(No symbol) [0x0x7ff621a3a456]\n\t(No symbol) [0x0x7ff621a70590]\n\t(No symbol) [0x0x7ff621a987fb]\n\t(No symbol) [0x0x7ff621a70153]\n\t(No symbol) [0x0x7ff621a38b02]\n\t(No symbol) [0x0x7ff621a398d3]\n\tGetHandleVerifier [0x0x7ff621f2e83d+2949837]\n\tGetHandleVerifier [0x0x7ff621f28c6a+2926330]\n\tGetHandleVerifier [0x0x7ff621f486c7+3055959]\n\tGetHandleVerifier [0x0x7ff621c8cfee+191102]\n\tGetHandleVerifier [0x0x7ff621c950af+224063]\n\tGetHandleVerifier [0x0x7ff621c7af64+117236]\n\tGetHandleVerifier [0x0x7ff621c7b119+117673]\n\tGetHandleVerifier [0x0x7ff621c610a8+11064]\n\tBaseThreadInitThunk [0x0x7ffbb408e8d7+23]\n\tRtlUserThreadStart [0x0x7ffbb556c53c+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"25758aeae90e5d449d19ecb6919ba1d5\")>\n\n    def test_radio_buttons(driver):\n        page = FormPage(driver)\n        page.go_to_radio_button_page()\n>       page.select_yes_radio()\n\ntests\\test_form_elements.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\form_page.py:37: in select_yes_radio\n    self.click(self.YES_RADIO_LABEL)\npages\\base_page.py:17: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018F9B8AA060>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff621c610a8+11064]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffbb408e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffbb556c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label class=\"custom-control-label\" for=\"yesRadio\">...</label> is not clickable at point (40, 833). Other element would receive the click: <div id=\"fixedban\" style=\"width:100%;margin:auto;text-align:center;float:none;overflow:hidden;display:scroll;position:fixed;bottom:0;z-index:9999999\">...</div>\nE         (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff621c71eb5+80197]\nE       \tGetHandleVerifier [0x0x7ff621c71f10+80288]\nE       \t(No symbol) [0x0x7ff6219f02fa]\nE       \t(No symbol) [0x0x7ff621a4fe69]\nE       \t(No symbol) [0x0x7ff621a4d7ee]\nE       \t(No symbol) [0x0x7ff621a4a731]\nE       \t(No symbol) [0x0x7ff621a49620]\nE       \t(No symbol) [0x0x7ff621a3abc8]\nE       \t(No symbol) [0x0x7ff621a7037a]\nE       \t(No symbol) [0x0x7ff621a3a456]\nE       \t(No symbol) [0x0x7ff621a70590]\nE       \t(No symbol) [0x0x7ff621a987fb]\nE       \t(No symbol) [0x0x7ff621a70153]\nE       \t(No symbol) [0x0x7ff621a38b02]\nE       \t(No symbol) [0x0x7ff621a398d3]\nE       \tGetHandleVerifier [0x0x7ff621f2e83d+2949837]\nE       \tGetHandleVerifier [0x0x7ff621f28c6a+2926330]\nE       \tGetHandleVerifier [0x0x7ff621f486c7+3055959]\nE       \tGetHandleVerifier [0x0x7ff621c8cfee+191102]\nE       \tGetHandleVerifier [0x0x7ff621c950af+224063]\nE       \tGetHandleVerifier [0x0x7ff621c7af64+117236]\nE       \tGetHandleVerifier [0x0x7ff621c7b119+117673]\nE       \tGetHandleVerifier [0x0x7ff621c610a8+11064]\nE       \tBaseThreadInitThunk [0x0x7ffbb408e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffbb556c53c+44]\n\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"driver","time":{"start":1760859060489,"stop":1760859063470,"duration":2981},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label class=\"custom-control-label\" for=\"yesRadio\">...</label> is not clickable at point (40, 833). Other element would receive the click: <div id=\"fixedban\" style=\"width:100%;margin:auto;text-align:center;float:none;overflow:hidden;display:scroll;position:fixed;bottom:0;z-index:9999999\">...</div>\n  (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff621c71eb5+80197]\n\tGetHandleVerifier [0x0x7ff621c71f10+80288]\n\t(No symbol) [0x0x7ff6219f02fa]\n\t(No symbol) [0x0x7ff621a4fe69]\n\t(No symbol) [0x0x7ff621a4d7ee]\n\t(No symbol) [0x0x7ff621a4a731]\n\t(No symbol) [0x0x7ff621a49620]\n\t(No symbol) [0x0x7ff621a3abc8]\n\t(No symbol) [0x0x7ff621a7037a]\n\t(No symbol) [0x0x7ff621a3a456]\n\t(No symbol) [0x0x7ff621a70590]\n\t(No symbol) [0x0x7ff621a987fb]\n\t(No symbol) [0x0x7ff621a70153]\n\t(No symbol) [0x0x7ff621a38b02]\n\t(No symbol) [0x0x7ff621a398d3]\n\tGetHandleVerifier [0x0x7ff621f2e83d+2949837]\n\tGetHandleVerifier [0x0x7ff621f28c6a+2926330]\n\tGetHandleVerifier [0x0x7ff621f486c7+3055959]\n\tGetHandleVerifier [0x0x7ff621c8cfee+191102]\n\tGetHandleVerifier [0x0x7ff621c950af+224063]\n\tGetHandleVerifier [0x0x7ff621c7af64+117236]\n\tGetHandleVerifier [0x0x7ff621c7b119+117673]\n\tGetHandleVerifier [0x0x7ff621c610a8+11064]\n\tBaseThreadInitThunk [0x0x7ffbb408e8d7+23]\n\tRtlUserThreadStart [0x0x7ffbb556c53c+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"25758aeae90e5d449d19ecb6919ba1d5\")>\n\n    def test_radio_buttons(driver):\n        page = FormPage(driver)\n        page.go_to_radio_button_page()\n>       page.select_yes_radio()\n\ntests\\test_form_elements.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\form_page.py:37: in select_yes_radio\n    self.click(self.YES_RADIO_LABEL)\npages\\base_page.py:17: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018F9B8AA060>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff621c610a8+11064]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffbb408e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffbb556c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label class=\"custom-control-label\" for=\"yesRadio\">...</label> is not clickable at point (40, 833). Other element would receive the click: <div id=\"fixedban\" style=\"width:100%;margin:auto;text-align:center;float:none;overflow:hidden;display:scroll;position:fixed;bottom:0;z-index:9999999\">...</div>\nE         (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff621c71eb5+80197]\nE       \tGetHandleVerifier [0x0x7ff621c71f10+80288]\nE       \t(No symbol) [0x0x7ff6219f02fa]\nE       \t(No symbol) [0x0x7ff621a4fe69]\nE       \t(No symbol) [0x0x7ff621a4d7ee]\nE       \t(No symbol) [0x0x7ff621a4a731]\nE       \t(No symbol) [0x0x7ff621a49620]\nE       \t(No symbol) [0x0x7ff621a3abc8]\nE       \t(No symbol) [0x0x7ff621a7037a]\nE       \t(No symbol) [0x0x7ff621a3a456]\nE       \t(No symbol) [0x0x7ff621a70590]\nE       \t(No symbol) [0x0x7ff621a987fb]\nE       \t(No symbol) [0x0x7ff621a70153]\nE       \t(No symbol) [0x0x7ff621a38b02]\nE       \t(No symbol) [0x0x7ff621a398d3]\nE       \tGetHandleVerifier [0x0x7ff621f2e83d+2949837]\nE       \tGetHandleVerifier [0x0x7ff621f28c6a+2926330]\nE       \tGetHandleVerifier [0x0x7ff621f486c7+3055959]\nE       \tGetHandleVerifier [0x0x7ff621c8cfee+191102]\nE       \tGetHandleVerifier [0x0x7ff621c950af+224063]\nE       \tGetHandleVerifier [0x0x7ff621c7af64+117236]\nE       \tGetHandleVerifier [0x0x7ff621c7b119+117673]\nE       \tGetHandleVerifier [0x0x7ff621c610a8+11064]\nE       \tBaseThreadInitThunk [0x0x7ffbb408e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffbb556c53c+44]\n\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"9d21d462824da032","name":"log","source":"9d21d462824da032.txt","type":"text/plain","size":378}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1760859071137,"stop":1760859073657,"duration":2520},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_form_elements"},{"name":"host","value":"ASCENDI-8RP1I77"},{"name":"thread","value":"2188-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_form_elements"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e32eb859087f3ed4","status":"passed","time":{"start":1760858154980,"stop":1760858172949,"duration":17969}},{"uid":"62f5cea792d65177","status":"passed","time":{"start":1760771766494,"stop":1760771791843,"duration":25349}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"c8cf978944ce9be4.json","parameterValues":[]}